--------------------------------------------------------
--  File created - Friday-April-19-2024   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table TAB_AUD_CLIENTE
--------------------------------------------------------

  CREATE TABLE "PROYECTO"."TAB_AUD_CLIENTE" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USUARIO" VARCHAR2(150 BYTE), 
	"ACCION" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TAB_AUD_CONDUCTOR
--------------------------------------------------------

  CREATE TABLE "PROYECTO"."TAB_AUD_CONDUCTOR" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USUARIO" VARCHAR2(150 BYTE), 
	"ACCION" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TAB_AUD_ESCUELA
--------------------------------------------------------

  CREATE TABLE "PROYECTO"."TAB_AUD_ESCUELA" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USUARIO" VARCHAR2(150 BYTE), 
	"ACCION" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TAB_AUD_VEHICULO
--------------------------------------------------------

  CREATE TABLE "PROYECTO"."TAB_AUD_VEHICULO" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USUARIO" VARCHAR2(150 BYTE), 
	"ACCION" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TAB_CLIENTE
--------------------------------------------------------

  CREATE TABLE "PROYECTO"."TAB_CLIENTE" 
   (	"CEDULA" VARCHAR2(20 BYTE), 
	"NOMBRE" VARCHAR2(25 BYTE), 
	"APELLIDO1" VARCHAR2(25 BYTE), 
	"APELLIDO2" VARCHAR2(25 BYTE), 
	"UBICACION" VARCHAR2(255 BYTE), 
	"CANTIDAD_CLIENTES" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TAB_CONDUCTOR
--------------------------------------------------------

  CREATE TABLE "PROYECTO"."TAB_CONDUCTOR" 
   (	"CEDULA" VARCHAR2(20 BYTE), 
	"NOMBRE" VARCHAR2(25 BYTE), 
	"APELLIDO1" VARCHAR2(25 BYTE), 
	"APELLIDO2" VARCHAR2(25 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TAB_ESCUELA
--------------------------------------------------------

  CREATE TABLE "PROYECTO"."TAB_ESCUELA" 
   (	"ID_ESCUELA" NUMBER, 
	"NOMBRE" VARCHAR2(50 BYTE), 
	"UBICACION" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TAB_RUTA
--------------------------------------------------------

  CREATE TABLE "PROYECTO"."TAB_RUTA" 
   (	"PLACA" VARCHAR2(20 BYTE), 
	"ID_ESCUELA" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TAB_VEHICULO
--------------------------------------------------------

  CREATE TABLE "PROYECTO"."TAB_VEHICULO" 
   (	"PLACA" VARCHAR2(20 BYTE), 
	"MODELO" VARCHAR2(20 BYTE), 
	"MARCA" VARCHAR2(20 BYTE), 
	"CAPACIDAD" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TAB_VEHICULO_CLIENTE
--------------------------------------------------------

  CREATE TABLE "PROYECTO"."TAB_VEHICULO_CLIENTE" 
   (	"PLACA" VARCHAR2(20 BYTE), 
	"CEDULA_CLIENTE" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TAB_VEHICULO_CONDUCTOR
--------------------------------------------------------

  CREATE TABLE "PROYECTO"."TAB_VEHICULO_CONDUCTOR" 
   (	"PLACA" VARCHAR2(20 BYTE), 
	"CEDULA" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for View V_CANTIDAD_CLIENTES_VEHICULO
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PROYECTO"."V_CANTIDAD_CLIENTES_VEHICULO" ("PLACA", "CLIENTES") AS 
  SELECT v.PLACA, SUM(c.CANTIDAD_CLIENTES) AS CLIENTES
FROM TAB_VEHICULO v
LEFT JOIN TAB_VEHICULO_CLIENTE vc ON v.PLACA = vc.PLACA
LEFT JOIN TAB_CLIENTE c ON vc.CEDULA_CLIENTE = c.CEDULA
GROUP BY v.PLACA
;
--------------------------------------------------------
--  DDL for View V_CONDUCTOR_ASIGNADO
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PROYECTO"."V_CONDUCTOR_ASIGNADO" ("NOMBRE", "PLACA") AS 
  SELECT (c.NOMBRE || ' ' || c.APELLIDO1|| ' ' || c.APELLIDO2) AS NOMBRE, vc.PLACA
FROM TAB_CONDUCTOR c
INNER JOIN TAB_VEHICULO_CONDUCTOR vc ON c.CEDULA = vc.CEDULA
;
--------------------------------------------------------
--  DDL for View V_ESPACIO_DISPONIBLE
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PROYECTO"."V_ESPACIO_DISPONIBLE" ("PLACA", "DISPONIBILIDAD") AS 
  SELECT v.PLACA, 
       v.CAPACIDAD - COALESCE(SUM(c.CANTIDAD_CLIENTES), 0) AS DISPONIBILIDAD
FROM TAB_VEHICULO v
LEFT JOIN TAB_VEHICULO_CLIENTE vc ON v.PLACA = vc.PLACA
LEFT JOIN TAB_CLIENTE c ON vc.CEDULA_CLIENTE = c.CEDULA
GROUP BY v.PLACA, v.CAPACIDAD
;
--------------------------------------------------------
--  DDL for View V_RUTA_DETALLADA
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PROYECTO"."V_RUTA_DETALLADA" ("ESCUELA", "NOMBRE_CONDUCTOR", "PLACA", "CANTIDAD_CLIENTES") AS 
  SELECT e.NOMBRE AS ESCUELA,
       (c.NOMBRE|| ' '|| c.APELLIDO1) AS NOMBRE_CONDUCTOR,
       v.PLACA,
       COUNT(vcc.CEDULA_CLIENTE) AS CANTIDAD_CLIENTES
FROM TAB_ESCUELA e
INNER JOIN TAB_RUTA r ON e.ID_ESCUELA = r.ID_ESCUELA
INNER JOIN TAB_VEHICULO_CONDUCTOR vc ON r.PLACA = vc.PLACA
INNER JOIN TAB_CONDUCTOR c ON vc.CEDULA = c.CEDULA
INNER JOIN TAB_VEHICULO v ON r.PLACA = v.PLACA
LEFT JOIN TAB_VEHICULO_CLIENTE vcc ON v.PLACA = vcc.PLACA
GROUP BY e.NOMBRE, c.NOMBRE, c.APELLIDO1, v.PLACA
;
--------------------------------------------------------
--  DDL for View V_VEHICULO_ESCUELA
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PROYECTO"."V_VEHICULO_ESCUELA" ("NOMBRE", "PLACA") AS 
  SELECT e.NOMBRE AS NOMBRE, r.PLACA
FROM TAB_ESCUELA e
LEFT JOIN TAB_RUTA r ON e.ID_ESCUELA = r.ID_ESCUELA
;
REM INSERTING into PROYECTO.TAB_AUD_CLIENTE
SET DEFINE OFF;
Insert into PROYECTO.TAB_AUD_CLIENTE (ID,USUARIO,ACCION) values (1,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CLIENTE (ID,USUARIO,ACCION) values (2,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CLIENTE (ID,USUARIO,ACCION) values (3,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CLIENTE (ID,USUARIO,ACCION) values (4,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CLIENTE (ID,USUARIO,ACCION) values (5,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CLIENTE (ID,USUARIO,ACCION) values (6,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CLIENTE (ID,USUARIO,ACCION) values (7,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CLIENTE (ID,USUARIO,ACCION) values (8,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CLIENTE (ID,USUARIO,ACCION) values (9,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CLIENTE (ID,USUARIO,ACCION) values (10,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CLIENTE (ID,USUARIO,ACCION) values (11,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CLIENTE (ID,USUARIO,ACCION) values (12,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CLIENTE (ID,USUARIO,ACCION) values (13,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CLIENTE (ID,USUARIO,ACCION) values (14,'PROYECTO','INSERT');
REM INSERTING into PROYECTO.TAB_AUD_CONDUCTOR
SET DEFINE OFF;
Insert into PROYECTO.TAB_AUD_CONDUCTOR (ID,USUARIO,ACCION) values (1,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CONDUCTOR (ID,USUARIO,ACCION) values (2,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CONDUCTOR (ID,USUARIO,ACCION) values (3,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CONDUCTOR (ID,USUARIO,ACCION) values (4,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CONDUCTOR (ID,USUARIO,ACCION) values (5,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_CONDUCTOR (ID,USUARIO,ACCION) values (6,'PROYECTO','INSERT');
REM INSERTING into PROYECTO.TAB_AUD_ESCUELA
SET DEFINE OFF;
Insert into PROYECTO.TAB_AUD_ESCUELA (ID,USUARIO,ACCION) values (1,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_ESCUELA (ID,USUARIO,ACCION) values (2,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_ESCUELA (ID,USUARIO,ACCION) values (3,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_ESCUELA (ID,USUARIO,ACCION) values (4,'PROYECTO','INSERT');
REM INSERTING into PROYECTO.TAB_AUD_VEHICULO
SET DEFINE OFF;
Insert into PROYECTO.TAB_AUD_VEHICULO (ID,USUARIO,ACCION) values (1,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_VEHICULO (ID,USUARIO,ACCION) values (2,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_VEHICULO (ID,USUARIO,ACCION) values (3,'PROYECTO','INSERT');
Insert into PROYECTO.TAB_AUD_VEHICULO (ID,USUARIO,ACCION) values (4,'PROYECTO','INSERT');
REM INSERTING into PROYECTO.TAB_CLIENTE
SET DEFINE OFF;
Insert into PROYECTO.TAB_CLIENTE (CEDULA,NOMBRE,APELLIDO1,APELLIDO2,UBICACION,CANTIDAD_CLIENTES) values ('11','Juan','Mata','Saenz','Alajuela Centro',2);
Insert into PROYECTO.TAB_CLIENTE (CEDULA,NOMBRE,APELLIDO1,APELLIDO2,UBICACION,CANTIDAD_CLIENTES) values ('12','Maria','Perez','Navarro','Canoas',1);
Insert into PROYECTO.TAB_CLIENTE (CEDULA,NOMBRE,APELLIDO1,APELLIDO2,UBICACION,CANTIDAD_CLIENTES) values ('13','Daniel','Rivas','Garcia','Alajuela Centro',3);
Insert into PROYECTO.TAB_CLIENTE (CEDULA,NOMBRE,APELLIDO1,APELLIDO2,UBICACION,CANTIDAD_CLIENTES) values ('14','Hector','Jimenez','Perez','Guadalupe',5);
Insert into PROYECTO.TAB_CLIENTE (CEDULA,NOMBRE,APELLIDO1,APELLIDO2,UBICACION,CANTIDAD_CLIENTES) values ('15','Pedro','Mora','Bernabeu','Guadalupe',3);
Insert into PROYECTO.TAB_CLIENTE (CEDULA,NOMBRE,APELLIDO1,APELLIDO2,UBICACION,CANTIDAD_CLIENTES) values ('22','Elena','Morera','Porras','Guadalupe',2);
Insert into PROYECTO.TAB_CLIENTE (CEDULA,NOMBRE,APELLIDO1,APELLIDO2,UBICACION,CANTIDAD_CLIENTES) values ('23','Melanie','Soto','Morera','Canoas',1);
Insert into PROYECTO.TAB_CLIENTE (CEDULA,NOMBRE,APELLIDO1,APELLIDO2,UBICACION,CANTIDAD_CLIENTES) values ('24','Kevin','Arguello','Castro','San Isidro',4);
Insert into PROYECTO.TAB_CLIENTE (CEDULA,NOMBRE,APELLIDO1,APELLIDO2,UBICACION,CANTIDAD_CLIENTES) values ('25','Anival','Godoy','Cruz','San Isidro',3);
Insert into PROYECTO.TAB_CLIENTE (CEDULA,NOMBRE,APELLIDO1,APELLIDO2,UBICACION,CANTIDAD_CLIENTES) values ('26','Leonardo','Lara','Herrera','Canoas',1);
Insert into PROYECTO.TAB_CLIENTE (CEDULA,NOMBRE,APELLIDO1,APELLIDO2,UBICACION,CANTIDAD_CLIENTES) values ('31','Daniela','Gutierrez','Herra','Canoas',2);
Insert into PROYECTO.TAB_CLIENTE (CEDULA,NOMBRE,APELLIDO1,APELLIDO2,UBICACION,CANTIDAD_CLIENTES) values ('32','Jimena','Hernandez','Perez','San Isidro',4);
Insert into PROYECTO.TAB_CLIENTE (CEDULA,NOMBRE,APELLIDO1,APELLIDO2,UBICACION,CANTIDAD_CLIENTES) values ('33','Criss','Villalobos','Villalobos','Canoas',2);
Insert into PROYECTO.TAB_CLIENTE (CEDULA,NOMBRE,APELLIDO1,APELLIDO2,UBICACION,CANTIDAD_CLIENTES) values ('34','Yolanda','Soto','Sanchez','Alajuela Centro',3);
REM INSERTING into PROYECTO.TAB_CONDUCTOR
SET DEFINE OFF;
Insert into PROYECTO.TAB_CONDUCTOR (CEDULA,NOMBRE,APELLIDO1,APELLIDO2) values ('51','Daniel','Mata','Porras');
Insert into PROYECTO.TAB_CONDUCTOR (CEDULA,NOMBRE,APELLIDO1,APELLIDO2) values ('52','Maria','Morera','Navarro');
Insert into PROYECTO.TAB_CONDUCTOR (CEDULA,NOMBRE,APELLIDO1,APELLIDO2) values ('53','Mario','Rodriguez','Gonzalez');
Insert into PROYECTO.TAB_CONDUCTOR (CEDULA,NOMBRE,APELLIDO1,APELLIDO2) values ('54','Marco','Ramirez','Calvo');
Insert into PROYECTO.TAB_CONDUCTOR (CEDULA,NOMBRE,APELLIDO1,APELLIDO2) values ('89','Jimena','Solis','Segura');
Insert into PROYECTO.TAB_CONDUCTOR (CEDULA,NOMBRE,APELLIDO1,APELLIDO2) values ('88','Isidoro','Picado','Salas');
REM INSERTING into PROYECTO.TAB_ESCUELA
SET DEFINE OFF;
Insert into PROYECTO.TAB_ESCUELA (ID_ESCUELA,NOMBRE,UBICACION) values (1,'Escuela Guadalupe','Guadalupe');
Insert into PROYECTO.TAB_ESCUELA (ID_ESCUELA,NOMBRE,UBICACION) values (2,'Escuela Manuel Francisco Carrillo Saborio','Canoas');
Insert into PROYECTO.TAB_ESCUELA (ID_ESCUELA,NOMBRE,UBICACION) values (3,'Escuela Ascension Esquivel Ibarra','Alajuela Centro');
Insert into PROYECTO.TAB_ESCUELA (ID_ESCUELA,NOMBRE,UBICACION) values (4,'Escuela San Isidro','San Isidro');
REM INSERTING into PROYECTO.TAB_RUTA
SET DEFINE OFF;
Insert into PROYECTO.TAB_RUTA (PLACA,ID_ESCUELA) values ('121547',3);
Insert into PROYECTO.TAB_RUTA (PLACA,ID_ESCUELA) values ('BFF151',1);
Insert into PROYECTO.TAB_RUTA (PLACA,ID_ESCUELA) values ('RTT989',2);
Insert into PROYECTO.TAB_RUTA (PLACA,ID_ESCUELA) values ('TFT898',4);
REM INSERTING into PROYECTO.TAB_VEHICULO
SET DEFINE OFF;
Insert into PROYECTO.TAB_VEHICULO (PLACA,MODELO,MARCA,CAPACIDAD) values ('BFF151','1998','Toyota',20);
Insert into PROYECTO.TAB_VEHICULO (PLACA,MODELO,MARCA,CAPACIDAD) values ('RTT989','2005','Mercedes Benz',15);
Insert into PROYECTO.TAB_VEHICULO (PLACA,MODELO,MARCA,CAPACIDAD) values ('121547','2006','Toyota',12);
Insert into PROYECTO.TAB_VEHICULO (PLACA,MODELO,MARCA,CAPACIDAD) values ('TFT898','1999','Volvo',12);
REM INSERTING into PROYECTO.TAB_VEHICULO_CLIENTE
SET DEFINE OFF;
Insert into PROYECTO.TAB_VEHICULO_CLIENTE (PLACA,CEDULA_CLIENTE) values ('121547','11');
Insert into PROYECTO.TAB_VEHICULO_CLIENTE (PLACA,CEDULA_CLIENTE) values ('121547','13');
Insert into PROYECTO.TAB_VEHICULO_CLIENTE (PLACA,CEDULA_CLIENTE) values ('121547','34');
Insert into PROYECTO.TAB_VEHICULO_CLIENTE (PLACA,CEDULA_CLIENTE) values ('BFF151','14');
Insert into PROYECTO.TAB_VEHICULO_CLIENTE (PLACA,CEDULA_CLIENTE) values ('BFF151','15');
Insert into PROYECTO.TAB_VEHICULO_CLIENTE (PLACA,CEDULA_CLIENTE) values ('BFF151','22');
Insert into PROYECTO.TAB_VEHICULO_CLIENTE (PLACA,CEDULA_CLIENTE) values ('RTT989','12');
Insert into PROYECTO.TAB_VEHICULO_CLIENTE (PLACA,CEDULA_CLIENTE) values ('RTT989','23');
Insert into PROYECTO.TAB_VEHICULO_CLIENTE (PLACA,CEDULA_CLIENTE) values ('RTT989','26');
Insert into PROYECTO.TAB_VEHICULO_CLIENTE (PLACA,CEDULA_CLIENTE) values ('RTT989','31');
Insert into PROYECTO.TAB_VEHICULO_CLIENTE (PLACA,CEDULA_CLIENTE) values ('RTT989','33');
Insert into PROYECTO.TAB_VEHICULO_CLIENTE (PLACA,CEDULA_CLIENTE) values ('TFT898','24');
Insert into PROYECTO.TAB_VEHICULO_CLIENTE (PLACA,CEDULA_CLIENTE) values ('TFT898','25');
Insert into PROYECTO.TAB_VEHICULO_CLIENTE (PLACA,CEDULA_CLIENTE) values ('TFT898','32');
REM INSERTING into PROYECTO.TAB_VEHICULO_CONDUCTOR
SET DEFINE OFF;
Insert into PROYECTO.TAB_VEHICULO_CONDUCTOR (PLACA,CEDULA) values ('121547','53');
Insert into PROYECTO.TAB_VEHICULO_CONDUCTOR (PLACA,CEDULA) values ('BFF151','51');
Insert into PROYECTO.TAB_VEHICULO_CONDUCTOR (PLACA,CEDULA) values ('RTT989','52');
Insert into PROYECTO.TAB_VEHICULO_CONDUCTOR (PLACA,CEDULA) values ('TFT898','54');
REM INSERTING into PROYECTO.V_CANTIDAD_CLIENTES_VEHICULO
SET DEFINE OFF;
Insert into PROYECTO.V_CANTIDAD_CLIENTES_VEHICULO (PLACA,CLIENTES) values ('121547',8);
Insert into PROYECTO.V_CANTIDAD_CLIENTES_VEHICULO (PLACA,CLIENTES) values ('BFF151',10);
Insert into PROYECTO.V_CANTIDAD_CLIENTES_VEHICULO (PLACA,CLIENTES) values ('RTT989',7);
Insert into PROYECTO.V_CANTIDAD_CLIENTES_VEHICULO (PLACA,CLIENTES) values ('TFT898',11);
REM INSERTING into PROYECTO.V_CONDUCTOR_ASIGNADO
SET DEFINE OFF;
Insert into PROYECTO.V_CONDUCTOR_ASIGNADO (NOMBRE,PLACA) values ('Mario Rodriguez Gonzalez','121547');
Insert into PROYECTO.V_CONDUCTOR_ASIGNADO (NOMBRE,PLACA) values ('Daniel Mata Porras','BFF151');
Insert into PROYECTO.V_CONDUCTOR_ASIGNADO (NOMBRE,PLACA) values ('Maria Morera Navarro','RTT989');
Insert into PROYECTO.V_CONDUCTOR_ASIGNADO (NOMBRE,PLACA) values ('Marco Ramirez Calvo','TFT898');
REM INSERTING into PROYECTO.V_ESPACIO_DISPONIBLE
SET DEFINE OFF;
Insert into PROYECTO.V_ESPACIO_DISPONIBLE (PLACA,DISPONIBILIDAD) values ('121547',4);
Insert into PROYECTO.V_ESPACIO_DISPONIBLE (PLACA,DISPONIBILIDAD) values ('RTT989',8);
Insert into PROYECTO.V_ESPACIO_DISPONIBLE (PLACA,DISPONIBILIDAD) values ('BFF151',10);
Insert into PROYECTO.V_ESPACIO_DISPONIBLE (PLACA,DISPONIBILIDAD) values ('TFT898',1);
REM INSERTING into PROYECTO.V_RUTA_DETALLADA
SET DEFINE OFF;
Insert into PROYECTO.V_RUTA_DETALLADA (ESCUELA,NOMBRE_CONDUCTOR,PLACA,CANTIDAD_CLIENTES) values ('Escuela Guadalupe','Daniel Mata','BFF151',3);
Insert into PROYECTO.V_RUTA_DETALLADA (ESCUELA,NOMBRE_CONDUCTOR,PLACA,CANTIDAD_CLIENTES) values ('Escuela Manuel Francisco Carrillo Saborio','Maria Morera','RTT989',5);
Insert into PROYECTO.V_RUTA_DETALLADA (ESCUELA,NOMBRE_CONDUCTOR,PLACA,CANTIDAD_CLIENTES) values ('Escuela Ascension Esquivel Ibarra','Mario Rodriguez','121547',3);
Insert into PROYECTO.V_RUTA_DETALLADA (ESCUELA,NOMBRE_CONDUCTOR,PLACA,CANTIDAD_CLIENTES) values ('Escuela San Isidro','Marco Ramirez','TFT898',3);
REM INSERTING into PROYECTO.V_VEHICULO_ESCUELA
SET DEFINE OFF;
Insert into PROYECTO.V_VEHICULO_ESCUELA (NOMBRE,PLACA) values ('Escuela Guadalupe','BFF151');
Insert into PROYECTO.V_VEHICULO_ESCUELA (NOMBRE,PLACA) values ('Escuela Manuel Francisco Carrillo Saborio','RTT989');
Insert into PROYECTO.V_VEHICULO_ESCUELA (NOMBRE,PLACA) values ('Escuela Ascension Esquivel Ibarra','121547');
Insert into PROYECTO.V_VEHICULO_ESCUELA (NOMBRE,PLACA) values ('Escuela San Isidro','TFT898');
--------------------------------------------------------
--  DDL for Index ESCUELA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."ESCUELA_PK" ON "PROYECTO"."TAB_ESCUELA" ("ID_ESCUELA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index RUTA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."RUTA_PK" ON "PROYECTO"."TAB_RUTA" ("PLACA", "ID_ESCUELA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_AUD_CLIENTE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_AUD_CLIENTE_PK" ON "PROYECTO"."TAB_AUD_CLIENTE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_AUD_CONDUCTOR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_AUD_CONDUCTOR_PK" ON "PROYECTO"."TAB_AUD_CONDUCTOR" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_AUD_ESCUELA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_AUD_ESCUELA_PK" ON "PROYECTO"."TAB_AUD_ESCUELA" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_AUD_VEHICULO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_AUD_VEHICULO_PK" ON "PROYECTO"."TAB_AUD_VEHICULO" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_CLIENTE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_CLIENTE_PK" ON "PROYECTO"."TAB_CLIENTE" ("CEDULA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_CONDUCTOR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_CONDUCTOR_PK" ON "PROYECTO"."TAB_CONDUCTOR" ("CEDULA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_VEHICULO_CLIENTE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_VEHICULO_CLIENTE_PK" ON "PROYECTO"."TAB_VEHICULO_CLIENTE" ("PLACA", "CEDULA_CLIENTE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_VEHICULO_CONDUCTOR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_VEHICULO_CONDUCTOR_PK" ON "PROYECTO"."TAB_VEHICULO_CONDUCTOR" ("PLACA", "CEDULA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_VEHICULO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_VEHICULO_PK" ON "PROYECTO"."TAB_VEHICULO" ("PLACA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_AUD_CLIENTE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_AUD_CLIENTE_PK" ON "PROYECTO"."TAB_AUD_CLIENTE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_AUD_CONDUCTOR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_AUD_CONDUCTOR_PK" ON "PROYECTO"."TAB_AUD_CONDUCTOR" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_AUD_ESCUELA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_AUD_ESCUELA_PK" ON "PROYECTO"."TAB_AUD_ESCUELA" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_AUD_VEHICULO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_AUD_VEHICULO_PK" ON "PROYECTO"."TAB_AUD_VEHICULO" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_CLIENTE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_CLIENTE_PK" ON "PROYECTO"."TAB_CLIENTE" ("CEDULA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_CONDUCTOR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_CONDUCTOR_PK" ON "PROYECTO"."TAB_CONDUCTOR" ("CEDULA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ESCUELA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."ESCUELA_PK" ON "PROYECTO"."TAB_ESCUELA" ("ID_ESCUELA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index RUTA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."RUTA_PK" ON "PROYECTO"."TAB_RUTA" ("PLACA", "ID_ESCUELA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_VEHICULO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_VEHICULO_PK" ON "PROYECTO"."TAB_VEHICULO" ("PLACA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_VEHICULO_CLIENTE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_VEHICULO_CLIENTE_PK" ON "PROYECTO"."TAB_VEHICULO_CLIENTE" ("PLACA", "CEDULA_CLIENTE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TAB_VEHICULO_CONDUCTOR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PROYECTO"."TAB_VEHICULO_CONDUCTOR_PK" ON "PROYECTO"."TAB_VEHICULO_CONDUCTOR" ("PLACA", "CEDULA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger TRG_DELETE_CLIENTE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_DELETE_CLIENTE" 
BEFORE DELETE ON TAB_CLIENTE
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_CLIENTE (USUARIO, ACCION)
    VALUES (USER(), 'DELETE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_DELETE_CLIENTE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_DELETE_CONDUCTOR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_DELETE_CONDUCTOR" 
BEFORE DELETE ON TAB_CONDUCTOR
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_CONDUCTOR (USUARIO, ACCION)
    VALUES (USER(), 'DELETE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_DELETE_CONDUCTOR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_DELETE_ESCUELA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_DELETE_ESCUELA" 
BEFORE DELETE ON TAB_ESCUELA
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_ESCUELA (USUARIO, ACCION)
    VALUES (USER(), 'DELETE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_DELETE_ESCUELA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_DELETE_VEHICULO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_DELETE_VEHICULO" 
BEFORE DELETE ON TAB_VEHICULO
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_VEHICULO (USUARIO, ACCION)
    VALUES (USER(), 'DELETE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_DELETE_VEHICULO" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSERT_CLIENTE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_INSERT_CLIENTE" 
AFTER INSERT ON TAB_CLIENTE
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_CLIENTE (USUARIO, ACCION)
    VALUES (USER(), 'INSERT');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_INSERT_CLIENTE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSERT_CONDUCTOR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_INSERT_CONDUCTOR" 
AFTER INSERT ON TAB_CONDUCTOR
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_CONDUCTOR (USUARIO, ACCION)
    VALUES (USER(), 'INSERT');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_INSERT_CONDUCTOR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSERT_ESCUELA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_INSERT_ESCUELA" 
AFTER INSERT ON TAB_ESCUELA
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_ESCUELA (USUARIO, ACCION)
    VALUES (USER(), 'INSERT');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_INSERT_ESCUELA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSERT_VEHICULO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_INSERT_VEHICULO" 
AFTER INSERT ON TAB_VEHICULO
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_VEHICULO (USUARIO, ACCION)
    VALUES (USER(), 'INSERT');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_INSERT_VEHICULO" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_UPDATE_CLIENTE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_UPDATE_CLIENTE" 
AFTER UPDATE ON TAB_CLIENTE
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_CLIENTE (USUARIO, ACCION)
    VALUES (USER(), 'UPDATE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_UPDATE_CLIENTE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_UPDATE_CONDUCTOR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_UPDATE_CONDUCTOR" 
AFTER UPDATE ON TAB_CONDUCTOR
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_CONDUCTOR (USUARIO, ACCION)
    VALUES (USER(), 'UPDATE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_UPDATE_CONDUCTOR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_UPDATE_ESCUELA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_UPDATE_ESCUELA" 
AFTER UPDATE ON TAB_ESCUELA
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_ESCUELA (USUARIO, ACCION)
    VALUES (USER(), 'UPDATE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_UPDATE_ESCUELA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_UPDATE_VEHICULO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_UPDATE_VEHICULO" 
AFTER UPDATE ON TAB_VEHICULO
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_VEHICULO (USUARIO, ACCION)
    VALUES (USER(), 'UPDATE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_UPDATE_VEHICULO" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSERT_CLIENTE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_INSERT_CLIENTE" 
AFTER INSERT ON TAB_CLIENTE
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_CLIENTE (USUARIO, ACCION)
    VALUES (USER(), 'INSERT');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_INSERT_CLIENTE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_UPDATE_CLIENTE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_UPDATE_CLIENTE" 
AFTER UPDATE ON TAB_CLIENTE
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_CLIENTE (USUARIO, ACCION)
    VALUES (USER(), 'UPDATE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_UPDATE_CLIENTE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_DELETE_CLIENTE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_DELETE_CLIENTE" 
BEFORE DELETE ON TAB_CLIENTE
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_CLIENTE (USUARIO, ACCION)
    VALUES (USER(), 'DELETE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_DELETE_CLIENTE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSERT_CONDUCTOR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_INSERT_CONDUCTOR" 
AFTER INSERT ON TAB_CONDUCTOR
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_CONDUCTOR (USUARIO, ACCION)
    VALUES (USER(), 'INSERT');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_INSERT_CONDUCTOR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_UPDATE_CONDUCTOR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_UPDATE_CONDUCTOR" 
AFTER UPDATE ON TAB_CONDUCTOR
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_CONDUCTOR (USUARIO, ACCION)
    VALUES (USER(), 'UPDATE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_UPDATE_CONDUCTOR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_DELETE_CONDUCTOR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_DELETE_CONDUCTOR" 
BEFORE DELETE ON TAB_CONDUCTOR
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_CONDUCTOR (USUARIO, ACCION)
    VALUES (USER(), 'DELETE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_DELETE_CONDUCTOR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSERT_ESCUELA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_INSERT_ESCUELA" 
AFTER INSERT ON TAB_ESCUELA
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_ESCUELA (USUARIO, ACCION)
    VALUES (USER(), 'INSERT');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_INSERT_ESCUELA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_UPDATE_ESCUELA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_UPDATE_ESCUELA" 
AFTER UPDATE ON TAB_ESCUELA
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_ESCUELA (USUARIO, ACCION)
    VALUES (USER(), 'UPDATE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_UPDATE_ESCUELA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_DELETE_ESCUELA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_DELETE_ESCUELA" 
BEFORE DELETE ON TAB_ESCUELA
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_ESCUELA (USUARIO, ACCION)
    VALUES (USER(), 'DELETE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_DELETE_ESCUELA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSERT_VEHICULO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_INSERT_VEHICULO" 
AFTER INSERT ON TAB_VEHICULO
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_VEHICULO (USUARIO, ACCION)
    VALUES (USER(), 'INSERT');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_INSERT_VEHICULO" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_UPDATE_VEHICULO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_UPDATE_VEHICULO" 
AFTER UPDATE ON TAB_VEHICULO
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_VEHICULO (USUARIO, ACCION)
    VALUES (USER(), 'UPDATE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_UPDATE_VEHICULO" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_DELETE_VEHICULO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PROYECTO"."TRG_DELETE_VEHICULO" 
BEFORE DELETE ON TAB_VEHICULO
FOR EACH ROW
BEGIN
    INSERT INTO TAB_AUD_VEHICULO (USUARIO, ACCION)
    VALUES (USER(), 'DELETE');
END;
/
ALTER TRIGGER "PROYECTO"."TRG_DELETE_VEHICULO" ENABLE;
--------------------------------------------------------
--  DDL for Procedure SP_ASIGNAR_CONDUCTOR_A_VEHICULO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "PROYECTO"."SP_ASIGNAR_CONDUCTOR_A_VEHICULO" (
    p_placa IN VARCHAR2,
    p_cedula_conductor IN VARCHAR2,
    p_usuario IN VARCHAR2
)
AS
BEGIN
    INSERT INTO TAB_VEHICULO_CONDUCTOR (PLACA, CEDULA)
    VALUES (p_placa, p_cedula_conductor);

    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_ELIMINAR_ESCUELA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "PROYECTO"."SP_ELIMINAR_ESCUELA" (
    p_id_escuela IN NUMBER,
    p_usuario IN VARCHAR2
)
AS
BEGIN
    DELETE FROM TAB_ESCUELA
    WHERE ID_ESCUELA = p_id_escuela;

    DELETE FROM TAB_RUTA
    WHERE ID_ESCUELA = p_id_escuela;

    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_INCREMENTAR_CANTIDAD_CLIENTES_ESCUELA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "PROYECTO"."SP_INCREMENTAR_CANTIDAD_CLIENTES_ESCUELA" (
    p_cedula IN NUMBER,
    p_cantidad_a_incrementar IN NUMBER
)
AS
BEGIN
    UPDATE TAB_CLIENTE
    SET CANTIDAD_CLIENTES = CANTIDAD_CLIENTES + p_cantidad_a_incrementar
    WHERE CEDULA = p_cedula;

    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_INSERTAR_CLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "PROYECTO"."SP_INSERTAR_CLIENTE" (
    p_cedula IN VARCHAR2,
    p_nombre IN VARCHAR2,
    p_apellido1 IN VARCHAR2,
    p_apellido2 IN VARCHAR2,
    p_ubicacion IN VARCHAR2,
    p_cantidad_clientes IN NUMBER
)
AS
BEGIN
    INSERT INTO TAB_CLIENTE (CEDULA, NOMBRE, APELLIDO1, APELLIDO2, UBICACION, CANTIDAD_CLIENTES)
    VALUES (p_cedula, p_nombre, p_apellido1, p_apellido2, p_ubicacion, p_cantidad_clientes);

    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_INSERTAR_CONDUCTOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "PROYECTO"."SP_INSERTAR_CONDUCTOR" (
    p_cedula IN VARCHAR2,
    p_nombre IN VARCHAR2,
    p_apellido1 IN VARCHAR2,
    p_apellido2 IN VARCHAR2
)
AS
BEGIN
    INSERT INTO TAB_CONDUCTOR (CEDULA, NOMBRE, APELLIDO1, APELLIDO2)
    VALUES (p_cedula, p_nombre, p_apellido1, p_apellido2);

END;

/
--------------------------------------------------------
--  DDL for Procedure SP_INSERTAR_ESCUELA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "PROYECTO"."SP_INSERTAR_ESCUELA" (
    p_id_escuela IN NUMBER,
    p_nombre IN VARCHAR2,
    p_ubicacion IN VARCHAR2
)
AS
BEGIN
    INSERT INTO TAB_ESCUELA (ID_ESCUELA, NOMBRE, UBICACION)
    VALUES (p_id_escuela, p_nombre, p_ubicacion);

    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_INSERTAR_VEHICULO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "PROYECTO"."SP_INSERTAR_VEHICULO" (
    p_placa IN VARCHAR2,
    p_modelo IN VARCHAR2,
    p_marca IN VARCHAR2,
    p_capacidad IN NUMBER
)
AS
BEGIN
    INSERT INTO TAB_VEHICULO (PLACA, MODELO, MARCA, CAPACIDAD)
    VALUES (p_placa, p_modelo, p_marca, p_capacidad);

    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_OBTENER_CONDUCTORES_POR_VEHICULO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "PROYECTO"."SP_OBTENER_CONDUCTORES_POR_VEHICULO" (
    p_placa IN VARCHAR2,
    p_conductores OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_conductores FOR
    SELECT TC.*
    FROM TAB_CONDUCTOR TC
    JOIN TAB_VEHICULO_CONDUCTOR TVC ON TC.CEDULA = TVC.CEDULA
    WHERE TVC.PLACA = p_placa;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_OBTENER_VEHICULOS_DISPONIBLES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "PROYECTO"."SP_OBTENER_VEHICULOS_DISPONIBLES" (
    p_capacidad_minima IN NUMBER,
    p_vehiculos_disponibles OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_vehiculos_disponibles FOR
    SELECT *
    FROM TAB_VEHICULO
    WHERE CAPACIDAD >= p_capacidad_minima
    AND PLACA NOT IN (SELECT PLACA FROM TAB_VEHICULO_CLIENTE);
END;

/
--------------------------------------------------------
--  Constraints for Table TAB_AUD_CLIENTE
--------------------------------------------------------

  ALTER TABLE "PROYECTO"."TAB_AUD_CLIENTE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "PROYECTO"."TAB_AUD_CLIENTE" ADD CONSTRAINT "TAB_AUD_CLIENTE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TAB_AUD_CONDUCTOR
--------------------------------------------------------

  ALTER TABLE "PROYECTO"."TAB_AUD_CONDUCTOR" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "PROYECTO"."TAB_AUD_CONDUCTOR" ADD CONSTRAINT "TAB_AUD_CONDUCTOR_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TAB_AUD_ESCUELA
--------------------------------------------------------

  ALTER TABLE "PROYECTO"."TAB_AUD_ESCUELA" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "PROYECTO"."TAB_AUD_ESCUELA" ADD CONSTRAINT "TAB_AUD_ESCUELA_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TAB_AUD_VEHICULO
--------------------------------------------------------

  ALTER TABLE "PROYECTO"."TAB_AUD_VEHICULO" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "PROYECTO"."TAB_AUD_VEHICULO" ADD CONSTRAINT "TAB_AUD_VEHICULO_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TAB_CLIENTE
--------------------------------------------------------

  ALTER TABLE "PROYECTO"."TAB_CLIENTE" MODIFY ("CEDULA" NOT NULL ENABLE);
  ALTER TABLE "PROYECTO"."TAB_CLIENTE" ADD CONSTRAINT "TAB_CLIENTE_PK" PRIMARY KEY ("CEDULA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TAB_CONDUCTOR
--------------------------------------------------------

  ALTER TABLE "PROYECTO"."TAB_CONDUCTOR" MODIFY ("CEDULA" NOT NULL ENABLE);
  ALTER TABLE "PROYECTO"."TAB_CONDUCTOR" ADD CONSTRAINT "TAB_CONDUCTOR_PK" PRIMARY KEY ("CEDULA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TAB_ESCUELA
--------------------------------------------------------

  ALTER TABLE "PROYECTO"."TAB_ESCUELA" MODIFY ("ID_ESCUELA" NOT NULL ENABLE);
  ALTER TABLE "PROYECTO"."TAB_ESCUELA" ADD CONSTRAINT "ESCUELA_PK" PRIMARY KEY ("ID_ESCUELA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TAB_RUTA
--------------------------------------------------------

  ALTER TABLE "PROYECTO"."TAB_RUTA" MODIFY ("PLACA" NOT NULL ENABLE);
  ALTER TABLE "PROYECTO"."TAB_RUTA" MODIFY ("ID_ESCUELA" NOT NULL ENABLE);
  ALTER TABLE "PROYECTO"."TAB_RUTA" ADD CONSTRAINT "RUTA_PK" PRIMARY KEY ("PLACA", "ID_ESCUELA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TAB_VEHICULO
--------------------------------------------------------

  ALTER TABLE "PROYECTO"."TAB_VEHICULO" MODIFY ("PLACA" NOT NULL ENABLE);
  ALTER TABLE "PROYECTO"."TAB_VEHICULO" ADD CONSTRAINT "TAB_VEHICULO_PK" PRIMARY KEY ("PLACA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TAB_VEHICULO_CLIENTE
--------------------------------------------------------

  ALTER TABLE "PROYECTO"."TAB_VEHICULO_CLIENTE" MODIFY ("PLACA" NOT NULL ENABLE);
  ALTER TABLE "PROYECTO"."TAB_VEHICULO_CLIENTE" MODIFY ("CEDULA_CLIENTE" NOT NULL ENABLE);
  ALTER TABLE "PROYECTO"."TAB_VEHICULO_CLIENTE" ADD CONSTRAINT "TAB_VEHICULO_CLIENTE_PK" PRIMARY KEY ("PLACA", "CEDULA_CLIENTE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TAB_VEHICULO_CONDUCTOR
--------------------------------------------------------

  ALTER TABLE "PROYECTO"."TAB_VEHICULO_CONDUCTOR" MODIFY ("PLACA" NOT NULL ENABLE);
  ALTER TABLE "PROYECTO"."TAB_VEHICULO_CONDUCTOR" MODIFY ("CEDULA" NOT NULL ENABLE);
  ALTER TABLE "PROYECTO"."TAB_VEHICULO_CONDUCTOR" ADD CONSTRAINT "TAB_VEHICULO_CONDUCTOR_PK" PRIMARY KEY ("PLACA", "CEDULA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;


--Paquete con SP que devuelve las rutas de un conductor
CREATE OR REPLACE PACKAGE PKG_OBTENER_RUTAS_POR_CONDUCTOR AS
    PROCEDURE SP_OBTENER_RUTAS_POR_CONDUCTOR (
        p_cedula_conductor IN VARCHAR2,
        p_rutas OUT SYS_REFCURSOR
    );
END PKG_OBTENER_RUTAS_POR_CONDUCTOR;
/
CREATE OR REPLACE PACKAGE BODY PKG_OBTENER_RUTAS_POR_CONDUCTOR AS
    PROCEDURE SP_OBTENER_RUTAS_POR_CONDUCTOR (
        p_cedula_conductor IN VARCHAR2,
        p_rutas OUT SYS_REFCURSOR
    )
    AS
    BEGIN
        OPEN p_rutas FOR
    SELECT R.*
    FROM TAB_RUTA R
    JOIN TAB_VEHICULO_CONDUCTOR VC ON R.PLACA = VC.PLACA
    WHERE VC.CEDULA = p_cedula_conductor;
    END;
END PKG_OBTENER_RUTAS_POR_CONDUCTOR;

--SP que recibe la cedula del cliente y devuelve los vehiculos asignados
CREATE OR REPLACE PROCEDURE SP_OBTENER_VEHICULOS_POR_CLIENTE (
    p_cedula_cliente IN VARCHAR2,
    p_vehiculos OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_vehiculos FOR
    SELECT V.*
    FROM TAB_VEHICULO V
    JOIN TAB_VEHICULO_CLIENTE VC ON V.PLACA = VC.PLACA
    WHERE VC.CEDULA_CLIENTE = p_cedula_cliente;
END;

--SP que recibe la placa y devuelve los conductores
CREATE OR REPLACE PROCEDURE SP_OBTENER_CONDUCTORES_POR_VEHICULO (
    p_placa_vehiculo IN VARCHAR2,
    p_conductores OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_conductores FOR
    SELECT C.*
    FROM TAB_CONDUCTOR C
    JOIN TAB_VEHICULO_CONDUCTOR VC ON C.CEDULA = VC.CEDULA
    WHERE VC.PLACA = p_placa_vehiculo;
END;

--Paquete que busca los clientes por escuela
CREATE OR REPLACE PACKAGE PKG_CLIENTES_POR_ESCUELA AS
    PROCEDURE SP_CALCULAR_CLIENTES_POR_ESCUELA (
        p_escuela_id IN NUMBER,
        p_cantidad_clientes OUT NUMBER
    );
END PKG_CLIENTES_POR_ESCUELA;
/
CREATE OR REPLACE PACKAGE BODY PKG_CLIENTES_POR_ESCUELA AS
    PROCEDURE SP_CALCULAR_CLIENTES_POR_ESCUELA (
        p_escuela_id IN NUMBER,
        p_cantidad_clientes OUT NUMBER
    )
    AS
        CURSOR c_rutas IS
            SELECT *
            FROM TAB_RUTA
            WHERE ID_ESCUELA = p_escuela_id;

        v_cantidad_clientes_temp NUMBER := 0;
    BEGIN
        p_cantidad_clientes := 0;

        FOR ruta_rec IN c_rutas LOOP
            FOR vehiculo_rec IN (SELECT C.CANTIDAD_CLIENTES
                                  FROM TAB_VEHICULO_CLIENTE VC
                                  JOIN TAB_CLIENTE C ON VC.CEDULA_CLIENTE = C.CEDULA
                                  WHERE VC.PLACA = ruta_rec.PLACA)
            LOOP
                v_cantidad_clientes_temp := v_cantidad_clientes_temp + vehiculo_rec.CANTIDAD_CLIENTES;
            END LOOP;

            p_cantidad_clientes := p_cantidad_clientes + v_cantidad_clientes_temp;

            v_cantidad_clientes_temp := 0;
        END LOOP;
    END;
END PKG_CLIENTES_POR_ESCUELA;

--Clientes que no han sido asignados
CREATE OR REPLACE PROCEDURE SP_OBTENER_CLIENTES_NO_ASIGNADOS (
    p_clientes_no_asignados OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_clientes_no_asignados FOR
    SELECT *
    FROM TAB_CLIENTE C
    WHERE NOT EXISTS (
        SELECT 1
        FROM TAB_VEHICULO_CLIENTE VC
        WHERE VC.CEDULA_CLIENTE = C.CEDULA
    );
END;

--Vistas contar la cantidad de veces que los usuarios
--hacen insert/delete/update en la tabla CLIENTE/VEHICULO/ESCUELA/CONDUCTOR

CREATE OR REPLACE VIEW V_AUD_CONDUCTOR AS
SELECT USUARIO,
       COUNT(CASE WHEN ACCION LIKE '%INSERT%' THEN 1 END) AS NUM_INSERT,
       COUNT(CASE WHEN ACCION LIKE '%DELETE%' THEN 1 END) AS NUM_DELETE,
       COUNT(CASE WHEN ACCION LIKE '%UPDATE%' THEN 1 END) AS NUM_UPDATE
FROM TAB_AUD_CONDUCTOR
GROUP BY USUARIO;
/
CREATE OR REPLACE VIEW V_AUD_ESCUELA AS
SELECT USUARIO,
       COUNT(CASE WHEN ACCION LIKE '%INSERT%' THEN 1 END) AS NUM_INSERT,
       COUNT(CASE WHEN ACCION LIKE '%DELETE%' THEN 1 END) AS NUM_DELETE,
       COUNT(CASE WHEN ACCION LIKE '%UPDATE%' THEN 1 END) AS NUM_UPDATE
FROM TAB_AUD_ESCUELA
GROUP BY USUARIO;
/
CREATE OR REPLACE VIEW V_AUD_VEHICULO AS
SELECT USUARIO,
       COUNT(CASE WHEN ACCION LIKE '%INSERT%' THEN 1 END) AS NUM_INSERT,
       COUNT(CASE WHEN ACCION LIKE '%DELETE%' THEN 1 END) AS NUM_DELETE,
       COUNT(CASE WHEN ACCION LIKE '%UPDATE%' THEN 1 END) AS NUM_UPDATE
FROM TAB_AUD_VEHICULO
GROUP BY USUARIO;
/
CREATE OR REPLACE VIEW V_AUD_CLIENTE AS
SELECT USUARIO,
       COUNT(CASE WHEN ACCION LIKE '%INSERT%' THEN 1 END) AS NUM_INSERT,
       COUNT(CASE WHEN ACCION LIKE '%DELETE%' THEN 1 END) AS NUM_DELETE,
       COUNT(CASE WHEN ACCION LIKE '%UPDATE%' THEN 1 END) AS NUM_UPDATE
FROM TAB_AUD_CLIENTE
GROUP BY USUARIO;
/

--Nuevas tablas

CREATE TABLE TAB_SALARIO (
    cedula VARCHAR2(20) PRIMARY KEY,
    salario NUMBER(10, 2),
    fecha_ingreso DATE
);

CREATE TABLE TAB_QUEJAS (
    placa VARCHAR2(20),
    comentario VARCHAR2(1000),
    fecha DATE
);

CREATE TABLE TAB_NOMINA (
    cedula VARCHAR2(20),
    mes VARCHAR2(20),
    cantidad_km NUMBER(10, 2)
);
--Vista cantidad de quejas por placa
CREATE OR REPLACE VIEW V_QUEJAS_PLACAS AS
SELECT placa, COUNT(*) AS q_quejas
FROM TAB_QUEJAS
GROUP BY placa;

--Funciones

--Funcion calcular salario
CREATE OR REPLACE FUNCTION CALCULAR_SALARIO(cedula_empleado VARCHAR2, mes VARCHAR2)
RETURN NUMBER
AS
    v_salario TAB_SALARIO.salario%TYPE;
    v_cantidad_km TAB_NOMINA.cantidad_km%TYPE;
    v_salario_total NUMBER;
BEGIN
    
    SELECT salario INTO v_salario
    FROM TAB_SALARIO
    WHERE cedula = cedula_empleado;

    SELECT cantidad_km INTO v_cantidad_km
    FROM TAB_NOMINA
    WHERE cedula = cedula_empleado AND mes = mes;

    v_salario_total := v_salario * v_cantidad_km;

    RETURN v_salario_total;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END;

--Funcion para calcular ingresos de empresa
CREATE OR REPLACE FUNCTION CALCULAR_INGRESOS(mes VARCHAR2)
RETURN NUMBER
AS
    v_total_ingresos NUMBER := 0;
BEGIN
    -- Tarifa regular de 1000 por km
    SELECT SUM(cantidad_km * 1000) INTO v_total_ingresos
    FROM TAB_NOMINA
    WHERE TO_CHAR(mes, 'MM') = mes;

    RETURN v_total_ingresos;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
END;

--Agregar la columna cedula_cliente a la tabla de quejas
ALTER TABLE TAB_QUEJAS
ADD cedula_cliente VARCHAR2(20);

--Buscar si un cliente tiene queja
CREATE OR REPLACE FUNCTION VERIFICAR_QUEJA_REGISTRADA(p_cedula_cliente VARCHAR2)
RETURN BOOLEAN
IS
    v_cantidad_quejas NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_cantidad_quejas
    FROM TAB_QUEJAS
    WHERE cedula_cliente = p_cedula_cliente;

    IF v_cantidad_quejas > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
END;
/

--Funcion para verificar disponibilidad
CREATE OR REPLACE FUNCTION VERIFICAR_DISPONIBILIDAD_ASIENTOS(p_placa VARCHAR2)
RETURN NUMBER
IS
    v_capacidad NUMBER;
    v_cantidad_clientes NUMBER;
    v_asientos_disponibles NUMBER;
BEGIN

    SELECT capacidad INTO v_capacidad
    FROM TAB_VEHICULO
    WHERE placa = p_placa;

    SELECT SUM(cantidad_clientes) INTO v_cantidad_clientes
    FROM TAB_CLIENTE
    WHERE cedula IN (SELECT cedula_cliente FROM TAB_VEHICULO_CLIENTE WHERE placa = p_placa);

    v_asientos_disponibles := v_capacidad - COALESCE(v_cantidad_clientes, 0);

    RETURN v_asientos_disponibles;
END;
/

CREATE OR REPLACE FUNCTION VERIFICAR_DISPONIBILIDAD_ASIENTOS(p_placa VARCHAR2)
RETURN NUMBER
IS
    v_capacidad NUMBER;
    v_cantidad_clientes NUMBER := 0;
    v_asientos_disponibles NUMBER;
BEGIN
    -- Cursor 1
    DECLARE
        CURSOR cur_capacidad IS
            SELECT capacidad
            FROM TAB_VEHICULO
            WHERE placa = p_placa;
    BEGIN
        OPEN cur_capacidad;
        FETCH cur_capacidad INTO v_capacidad;
        CLOSE cur_capacidad;
    END;

    -- Cursor 2
    DECLARE
        CURSOR cur_cantidad_clientes IS
            SELECT SUM(cantidad_clientes) AS total_clientes
            FROM TAB_CLIENTE
            WHERE cedula IN (SELECT cedula_cliente FROM TAB_VEHICULO_CLIENTE WHERE placa = p_placa);
    BEGIN
        OPEN cur_cantidad_clientes;
        FETCH cur_cantidad_clientes INTO v_cantidad_clientes;
        CLOSE cur_cantidad_clientes;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            v_cantidad_clientes := 0;
    END;

    v_asientos_disponibles := v_capacidad - COALESCE(v_cantidad_clientes, 0);

    RETURN v_asientos_disponibles;
END;
/

--FUNCIONES


INSERT INTO TAB_CONDUCTOR(cedula,nombre,apellido1,apellido2)
VALUES('100','Kevin','Castro','Lara');
/
INSERT INTO TAB_SALARIO (cedula, salario, fecha_ingreso)
VALUES ('51', 50000.00, TO_DATE('2024-04-01', 'YYYY-MM-DD'));
/
INSERT INTO TAB_SALARIO (cedula, salario, fecha_ingreso)
VALUES ('52', 52000.00, TO_DATE('2024-04-01', 'YYYY-MM-DD'));
/
INSERT INTO TAB_SALARIO (cedula, salario, fecha_ingreso)
VALUES ('53', 51000.00, TO_DATE('2024-04-01', 'YYYY-MM-DD'));
/
INSERT INTO TAB_SALARIO (cedula, salario, fecha_ingreso)
VALUES ('54', 56000.00, TO_DATE('2024-04-01', 'YYYY-MM-DD'));
/
INSERT INTO TAB_SALARIO (cedula, salario, fecha_ingreso)
VALUES ('89', 480000.00, TO_DATE('2024-04-01', 'YYYY-MM-DD'));
/
INSERT INTO TAB_SALARIO (cedula, salario, fecha_ingreso)
VALUES ('88', 700000.00, TO_DATE('2024-04-01', 'YYYY-MM-DD'));
/
INSERT INTO TAB_SALARIO (cedula, salario, fecha_ingreso)
VALUES ('100', 999000.00, TO_DATE('2023-08-01', 'YYYY-MM-DD'));
/
INSERT INTO TAB_QUEJAS (placa, comentario, fecha, cedula_cliente)
VALUES ('BFF151', 'Chofer temerario', SYSDATE,'11');
/
INSERT INTO TAB_ESCUELA(id_escuela,nombre,ubicacion)
VALUES(5,'Escuela Santa Cecilia','Cristo Rey');


SELECT * FROM TAB_CLIENTE;
SELECT * FROM TAB_aud_ESCUELA;
SELECT * FROM TAB_CONDUCTOR;
SELECT * FROM TAB_VEHICULO;
SELECT * FROM TAB_RUTA;



--Funcion para calcular la cantidad de clientes por escuela 1/11
CREATE OR REPLACE FUNCTION CALCULAR_CLIENTES_POR_ESCUELA
RETURN SYS_REFCURSOR
IS 
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT e.ID_ESCUELA, e.NOMBRE AS NOMBRE_ESCUELA, SUM(c.CANTIDAD_CLIENTES)
    FROM TAB_ESCUELA e
    LEFT JOIN TAB_CLIENTE c ON e.UBICACION = c.UBICACION
    GROUP BY e.ID_ESCUELA, e.NOMBRE;
    RETURN v_cursor;
END;
/
SET SERVEROUTPUT ON;
DECLARE
    v_cursor SYS_REFCURSOR;
    v_id_escuela TAB_ESCUELA.ID_ESCUELA%TYPE;
    v_nombre_escuela TAB_ESCUELA.NOMBRE%TYPE;
    v_cantidad_total_clientes NUMBER;
BEGIN
    v_cursor := CALCULAR_CLIENTES_POR_ESCUELA();
    
    LOOP
        FETCH v_cursor INTO v_id_escuela,v_nombre_escuela, v_cantidad_total_clientes;
        EXIT WHEN v_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_nombre_escuela || ' - CANTIDAD DE CLIENTES: ' || v_cantidad_total_clientes);
    END LOOP;
    CLOSE v_cursor;
END;
/
--Funcion  para verificar la calcular la cantidad de clientes registrados por ubicacion 2/11
CREATE OR REPLACE FUNCTION CALCULAR_CLIENTES_REGISTRADOS_UBICACION
RETURN SYS_REFCURSOR
IS 
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT UBICACION, COUNT(*) AS CLIENTES_REGISTRADOS
    FROM TAB_CLIENTE
    GROUP BY UBICACION;
    RETURN v_cursor;
END;
SET SERVEROUTPUT ON;
DECLARE
    v_cursor SYS_REFCURSOR;
    v_ubicacion TAB_CLIENTE.UBICACION%TYPE;
    v_cantidad_clientes NUMBER;
BEGIN
    v_cursor := CALCULAR_CLIENTES_REGISTRADOS_UBICACION();
    LOOP
        FETCH v_cursor INTO v_ubicacion, v_cantidad_clientes;
        EXIT WHEN v_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Ubicación: ' || v_ubicacion || ', Cantidad de Clientes registrados: ' || v_cantidad_clientes);
    END LOOP;
    CLOSE v_cursor;
END;
/

--Funcion para calcular el tiempo del conductor trabajado en la empresa 3/11
CREATE OR REPLACE FUNCTION CALCULAR_TIEMPO_TRABAJADO(cedula_conductor IN VARCHAR2)
RETURN NUMBER
IS
    v_tiempo_trabajado NUMBER;
BEGIN
    SELECT ROUND(MONTHS_BETWEEN(SYSDATE,FECHA_INGRESO))
    INTO v_tiempo_trabajado
    FROM TAB_SALARIO
    WHERE CEDULA = cedula_conductor;
    RETURN v_tiempo_trabajado;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END;
/
--prueba con bloque plsql
DECLARE
    v_tiempo_trabajado NUMBER;
BEGIN
    v_tiempo_trabajado := calcular_tiempo_trabajado('100');
    DBMS_OUTPUT.PUT_LINE('Tiempo trabajado: ' || v_tiempo_trabajado || ' meses');
END;
/
--Funcion para calcular la cantidad de conductores en la empresa 4/11
CREATE OR REPLACE FUNCTION CALCULAR_CANTIDAD_CONDUCTORES
RETURN NUMBER
IS
    v_cantidad_conductores NUMBER;
BEGIN 
    SELECT COUNT(*)
    INTO v_cantidad_conductores
    FROM TAB_CONDUCTOR;
    
    RETURN v_cantidad_conductores;
END;
/


--bloque pl sql
DECLARE
    v_cantidad_conductores NUMBER;
BEGIN
    v_cantidad_conductores := CALCULAR_CANTIDAD_CONDUCTORES();
    DBMS_OUTPUT.PUT_LINE('Cantidad de conductores en la empresa: ' || v_cantidad_conductores);
END;
/

--Funcion para calcular el numero de quejas 5/11
CREATE OR REPLACE FUNCTION CALCULAR_CANTIDAD_QUEJAS
RETURN NUMBER
IS
    v_cantidad_quejas NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_cantidad_quejas
    FROM TAB_QUEJAS;
    
    RETURN v_cantidad_quejas;
END;
DECLARE
    v_cantidad_quejas NUMBER;
BEGIN
    v_cantidad_quejas := CALCULAR_CANTIDAD_QUEJAS();
    DBMS_OUTPUT.PUT_LINE('Total de quejas: ' || v_cantidad_quejas);
END;
/
--Funcion para verificar la cantidad de clientes totales 6/11
CREATE OR REPLACE FUNCTION VERIFICAR_TOTAL_CLIENTE
RETURN NUMBER
IS
    v_total_c NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_total_c
    FROM TAB_CLIENTE;
    RETURN v_total_c;
END;
DECLARE
    v_total_c NUMBER;
BEGIN
    v_total_c := VERIFICAR_TOTAL_CLIENTE();
    DBMS_OUTPUT.PUT_LINE('Total de clientes: ' || v_total_c);
END;
--Funcion para verificar la capacidad total de todos los vehiculos 7/11
CREATE OR REPLACE FUNCTION VERIFICAR_CAPACIDAD_VEHICULO
RETURN SYS_REFCURSOR
IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT PLACA, MARCA, CAPACIDAD
    FROM TAB_VEHICULO;
    RETURN v_cursor;
END;
/
DECLARE
    v_cursor SYS_REFCURSOR;
    v_placa TAB_VEHICULO.PLACA%TYPE;
    v_marca TAB_VEHICULO.MARCA%TYPE;
    v_capacidad TAB_VEHICULO.CAPACIDAD%TYPE;
BEGIN
    v_cursor := VERIFICAR_CAPACIDAD_VEHICULO();
    LOOP
        FETCH v_cursor INTO v_placa, v_marca, v_capacidad;
        EXIT WHEN v_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Placa: ' || v_placa || ', Marca: ' || v_marca || ', Capacidad: ' || v_capacidad);
    END LOOP;
    CLOSE v_cursor;
END;
/

--Funcion mostrar conductores asignados, nombre, placa, marca 12, funcion 8/11
CREATE OR REPLACE FUNCTION MOSTRAR_CONDUCTOR_ASIGNADO
RETURN SYS_REFCURSOR
IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT c.NOMBRE || ' ' || c.APELLIDO1 AS NOMBRE_CONDUCTOR,
           vc.PLACA,
           v.MARCA
    FROM TAB_CONDUCTOR c
    JOIN TAB_VEHICULO_CONDUCTOR vc ON c.CEDULA = vc.CEDULA
    JOIN TAB_VEHICULO v ON vc.PLACA = v.PLACA;
    RETURN v_cursor;
END;
/
DECLARE
    v_cursor SYS_REFCURSOR;
    v_nombre_conductor VARCHAR2(100);
    v_placa TAB_VEHICULO_CONDUCTOR.PLACA%TYPE;
    v_marca TAB_VEHICULO.MARCA%TYPE;
BEGIN

    v_cursor := MOSTRAR_CONDUCTOR_ASIGNADO();
    
    LOOP
        FETCH v_cursor INTO v_nombre_conductor, v_placa, v_marca;
        EXIT WHEN v_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Conductor del Viaje: ' || v_nombre_conductor || ', Placa: ' || v_placa || ', Marca: ' || v_marca);
    END LOOP;
    CLOSE v_cursor;
END;
/

--Funcion nominas mensuales 13, funcion 9/11
CREATE OR REPLACE FUNCTION VERIFICAR_TOTAL_ESCUELAS
RETURN NUMBER
IS
    v_total_e NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_total_e
    FROM TAB_ESCUELA;
    RETURN v_total_e;
END;
DECLARE
    v_total_e NUMBER;
BEGIN
    v_total_e := VERIFICAR_TOTAL_ESCUELAS();
    DBMS_OUTPUT.PUT_LINE('Total de escuelas en ruta: ' || v_total_e);
END;


--Funcion mostrar salario base por numero de cedula 14, funcion 10/11
CREATE OR REPLACE FUNCTION MOSTRAR_SALARIO_CONDUCTOR
RETURN SYS_REFCURSOR
IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT c.NOMBRE, s.SALARIO
    FROM TAB_CONDUCTOR c
    JOIN TAB_SALARIO s ON c.CEDULA = s.CEDULA;
    
    RETURN v_cursor;
END;
/
DECLARE
    v_cursor SYS_REFCURSOR;
    v_nombre TAB_CONDUCTOR.NOMBRE%TYPE;
    v_salario TAB_SALARIO.SALARIO%TYPE;
BEGIN
    v_cursor := MOSTRAR_SALARIO_CONDUCTOR();
    LOOP
        FETCH v_cursor INTO v_nombre, v_salario;
        EXIT WHEN v_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Nombre del conductor: ' || v_nombre || ', Salario: ' || v_salario);
    END LOOP;
    CLOSE v_cursor;
END;
/


--Funcion que muestra los datos de los conductores, funcion 11/11
CREATE OR REPLACE FUNCTION MOSTRAR_DATOS_DE_CONDUCTORES
RETURN SYS_REFCURSOR
IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT *
    FROM TAB_CONDUCTOR;
    RETURN v_cursor;
END;
/
DECLARE
    v_cursor SYS_REFCURSOR;
    v_cedula TAB_CONDUCTOR.CEDULA%TYPE;
    v_nombre TAB_CONDUCTOR.NOMBRE%TYPE;
    v_apellido1 TAB_CONDUCTOR.APELLIDO1%TYPE;
    v_apellido2 TAB_CONDUCTOR.APELLIDO2%TYPE;
BEGIN
    v_cursor := MOSTRAR_DATOS_DE_CONDUCTORES();
    LOOP
        FETCH v_cursor INTO v_cedula, v_nombre, v_apellido1, v_apellido2;
        EXIT WHEN v_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Cedula: ' || v_cedula || ', Nombre: ' || v_nombre || ', Apellido1: ' || v_apellido1 || ', Apellido2: ' || v_apellido2);
    END LOOP;
    
    -- Cerrar el cursor
    CLOSE v_cursor;
END;
/

--Restante de paquetes

-- Paquete para obtener los conductores de un vehiculo 1

CREATE OR REPLACE PACKAGE PKG_OBTENER_CONDUCTORES_POR_VEHICULO AS
    PROCEDURE SP_OBTENER_CONDUCTORES_POR_VEHICULO (
        p_placa IN VARCHAR2,
        p_conductores OUT SYS_REFCURSOR
    );
END PKG_OBTENER_CONDUCTORES_POR_VEHICULO;
/

CREATE OR REPLACE PACKAGE BODY PKG_OBTENER_CONDUCTORES_POR_VEHICULO AS
    PROCEDURE SP_OBTENER_CONDUCTORES_POR_VEHICULO (
        p_placa IN VARCHAR2,
        p_conductores OUT SYS_REFCURSOR
    )
    AS
    BEGIN
        OPEN p_conductores FOR
        SELECT C.*
        FROM TAB_CONDUCTOR C
        JOIN TAB_VEHICULO_CONDUCTOR VC ON C.CEDULA = VC.CEDULA
        WHERE VC.PLACA = p_placa;
    END;
END PKG_OBTENER_CONDUCTORES_POR_VEHICULO;

-- Paquete para obtener los vehiculos de una escuela 2

CREATE OR REPLACE PACKAGE PKG_OBTENER_VEHICULOS_POR_ESCUELA AS
    PROCEDURE SP_OBTENER_VEHICULOS_POR_ESCUELA (
        p_id_escuela IN NUMBER,
        p_vehiculos OUT SYS_REFCURSOR
    );
END PKG_OBTENER_VEHICULOS_POR_ESCUELA;
/

CREATE OR REPLACE PACKAGE BODY PKG_OBTENER_VEHICULOS_POR_ESCUELA AS
    PROCEDURE SP_OBTENER_VEHICULOS_POR_ESCUELA (
        p_id_escuela IN NUMBER,
        p_vehiculos OUT SYS_REFCURSOR
    )
    AS
    BEGIN
        OPEN p_vehiculos FOR
        SELECT V.*
        FROM TAB_VEHICULO V
        JOIN TAB_RUTA R ON V.PLACA = R.PLACA
        WHERE R.ID_ESCUELA = p_id_escuela;
    END;
END PKG_OBTENER_VEHICULOS_POR_ESCUELA;

-- Paquete para obtener los clientes de una ruta 3

CREATE OR REPLACE PACKAGE PKG_OBTENER_CLIENTES_POR_RUTA AS
    PROCEDURE SP_OBTENER_CLIENTES_POR_RUTA (
        p_placa IN VARCHAR2,
        p_clientes OUT SYS_REFCURSOR
    );
END PKG_OBTENER_CLIENTES_POR_RUTA;
/

CREATE OR REPLACE PACKAGE BODY PKG_OBTENER_CLIENTES_POR_RUTA AS
    PROCEDURE SP_OBTENER_CLIENTES_POR_RUTA (
        p_placa IN VARCHAR2,
        p_clientes OUT SYS_REFCURSOR
    )
    AS
    BEGIN
        OPEN p_clientes FOR
        SELECT C.*
        FROM TAB_CLIENTE C
        JOIN TAB_VEHICULO_CLIENTE VC ON C.CEDULA = VC.CEDULA_CLIENTE
        WHERE VC.PLACA = p_placa;
    END;
END PKG_OBTENER_CLIENTES_POR_RUTA;

-- Paquete para obtener las escuelas sin rutas 4

CREATE OR REPLACE PACKAGE PKG_ESCUELAS_SIN_RUTAS AS
    PROCEDURE SP_ESCUELAS_SIN_RUTAS (
        p_escuelas OUT SYS_REFCURSOR
    );
END PKG_ESCUELAS_SIN_RUTAS;
/

CREATE OR REPLACE PACKAGE BODY PKG_ESCUELAS_SIN_RUTAS AS
    PROCEDURE SP_ESCUELAS_SIN_RUTAS (
        p_escuelas OUT SYS_REFCURSOR
    )
    AS
    BEGIN
        OPEN p_escuelas FOR
        SELECT E.*
        FROM TAB_ESCUELA E
        WHERE NOT EXISTS (
            SELECT 1
            FROM TAB_RUTA R
            WHERE R.ID_ESCUELA = E.ID_ESCUELA
        );
    END;
END PKG_ESCUELAS_SIN_RUTAS;

-- Paquete para obtener las rutas sin conductores 5

CREATE OR REPLACE PACKAGE PKG_RUTAS_SIN_CONDUCTORES AS
    PROCEDURE SP_RUTAS_SIN_CONDUCTORES (
        p_rutas OUT SYS_REFCURSOR
    );
END PKG_RUTAS_SIN_CONDUCTORES;
/

CREATE OR REPLACE PACKAGE BODY PKG_RUTAS_SIN_CONDUCTORES AS
    PROCEDURE SP_RUTAS_SIN_CONDUCTORES (
        p_rutas OUT SYS_REFCURSOR
    )
    AS
    BEGIN
        OPEN p_rutas FOR
        SELECT R.*
        FROM TAB_RUTA R
        WHERE NOT EXISTS (
            SELECT 1
            FROM TAB_VEHICULO_CONDUCTOR VC
            WHERE VC.PLACA = R.PLACA
        );
    END;
END PKG_RUTAS_SIN_CONDUCTORES;

-- Paquete para obtener los vehiculos sin conductores 6

CREATE OR REPLACE PACKAGE PKG_VEHICULOS_SIN_CONDUCTORES AS
    PROCEDURE SP_VEHICULOS_SIN_CONDUCTORES (
        p_vehiculos OUT SYS_REFCURSOR
    );
END PKG_VEHICULOS_SIN_CONDUCTORES;
/

CREATE OR REPLACE PACKAGE BODY PKG_VEHICULOS_SIN_CONDUCTORES AS
    PROCEDURE SP_VEHICULOS_SIN_CONDUCTORES (
        p_vehiculos OUT SYS_REFCURSOR
    )
    AS
    BEGIN
        OPEN p_vehiculos FOR
        SELECT V.*
        FROM TAB_VEHICULO V
        WHERE NOT EXISTS (
            SELECT 1
            FROM TAB_VEHICULO_CONDUCTOR VC
            WHERE VC.PLACA = V.PLACA
        );
    END;
END PKG_VEHICULOS_SIN_CONDUCTORES;

-- Paquete para obtener los conductores sin vehículos asignados 7

CREATE OR REPLACE PACKAGE PKG_CONDUCTORES_SIN_VEHICULO AS
    PROCEDURE SP_CONDUCTORES_SIN_VEHICULO (
        p_conductores OUT SYS_REFCURSOR
    );
END PKG_CONDUCTORES_SIN_VEHICULO;
/

CREATE OR REPLACE PACKAGE BODY PKG_CONDUCTORES_SIN_VEHICULO AS
    PROCEDURE SP_CONDUCTORES_SIN_VEHICULO (
        p_conductores OUT SYS_REFCURSOR
    )
    AS
    BEGIN
        OPEN p_conductores FOR
        SELECT C.*
        FROM TAB_CONDUCTOR C
        WHERE NOT EXISTS (
            SELECT 1
            FROM TAB_VEHICULO_CONDUCTOR VC
            WHERE VC.CEDULA = C.CEDULA
        );
    END;
END PKG_CONDUCTORES_SIN_VEHICULO;

-- Paquete para obtener los vehículos sin clientes asignados 8

CREATE OR REPLACE PACKAGE PKG_VEHICULOS_SIN_CLIENTES AS
    PROCEDURE SP_VEHICULOS_SIN_CLIENTES (
        p_vehiculos OUT SYS_REFCURSOR
    );
END PKG_VEHICULOS_SIN_CLIENTES;
/

CREATE OR REPLACE PACKAGE BODY PKG_VEHICULOS_SIN_CLIENTES AS
    PROCEDURE SP_VEHICULOS_SIN_CLIENTES (
        p_vehiculos OUT SYS_REFCURSOR
    )
    AS
    BEGIN
        OPEN p_vehiculos FOR
        SELECT V.*
        FROM TAB_VEHICULO V
        WHERE NOT EXISTS (
            SELECT 1
            FROM TAB_VEHICULO_CLIENTE VC
            WHERE VC.PLACA = V.PLACA
        );
    END;
END PKG_VEHICULOS_SIN_CLIENTES;

-- SP para obtener las rutas sin vehículos asignados

CREATE OR REPLACE PROCEDURE SP_RUTAS_SIN_VEHICULO (
    p_rutas OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_rutas FOR
    SELECT R.*
    FROM TAB_RUTA R
    WHERE NOT EXISTS (
        SELECT 1
        FROM TAB_VEHICULO V
        WHERE V.PLACA = R.PLACA
    );
END;

-- SP para obtener los clientes sin vehículos asignados

CREATE OR REPLACE PROCEDURE SP_CLIENTES_SIN_VEHICULO (
    p_clientes OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_clientes FOR
    SELECT C.*
    FROM TAB_CLIENTE C
    WHERE NOT EXISTS (
        SELECT 1
        FROM TAB_VEHICULO_CLIENTE VC
        WHERE VC.CEDULA_CLIENTE = C.CEDULA
    );
END;

-- SP para obtener las escuelas con rutas sin conductores asignados

CREATE OR REPLACE PROCEDURE SP_ESCUELAS_RUTAS_SIN_CONDUCTORES (
    p_escuelas OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_escuelas FOR
    SELECT DISTINCT E.*
    FROM TAB_ESCUELA E
    JOIN TAB_RUTA R ON E.ID_ESCUELA = R.ID_ESCUELA
    WHERE NOT EXISTS (
        SELECT 1
        FROM TAB_VEHICULO_CONDUCTOR VC
        WHERE VC.PLACA = R.PLACA
    );
END;